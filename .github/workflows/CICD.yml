name: CI  # Workflow name

on:
  push:
    branches: [ "master" ]  # Trigger on pushes to the master branch
  pull_request:
    branches: [ "master" ]  # Trigger on pull requests targeting master
  workflow_dispatch:  # Allows manual execution of the workflow

jobs:
  build:
    runs-on: ubuntu-latest  # Specifies the GitHub-hosted runner OS

    env:
      MONGO_NAME: ${{ secrets.MONGO_NAME }}
      MONGO_PASS: ${{ secrets.MONGO_PASS }}
      MONGO_DB: ${{ secrets.MONGO_DB }}
      MONGODB_URI: ${{ secrets.MONGODB_URI }}
      LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
      PERSISTENCE: ${{ secrets.PERSISTENCE }}
      RABBITMQ_URI: ${{ secrets.RABBITMQ_URI }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Install Dependencies
        run: npm install

      - name: Start Web Server (Auto-Stop After 15s)
        run: timeout 15s npm run dev || true

      - name: Generate Semantic Version
        id: semver
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.1.0")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build Docker Image
        run: |
          docker build -t demo-crm:$VERSION -t demo-crm:latest .

      - name: Start Services and Perform E2E Testing
        run: |
          docker compose down -v  
          export MONGO_NAME="$MONGO_NAME"
          export MONGO_PASS="$MONGO_PASS"
          export MONGO_DB="$MONGO_DB"
          export MONGODB_URI="$MONGODB_URI"
          export LOG_LEVEL="$LOG_LEVEL"
          export PERSISTENCE="$PERSISTENCE"
          export RABBITMQ_URI="$RABBITMQ_URI"         
          docker compose up -d  
          sleep 10        
          curl --fail --retry 5 --retry-delay 5 http://localhost:3000
          sleep 5
          curl --fail --retry 5 --retry-delay 5 http://localhost:3000          
          docker compose down -v

      - name: Checkout Repository (Again)
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1  # Change this to your AWS region

      - name: Authenticate with ECR and Push Docker Image
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 713881823524.dkr.ecr.ap-south-1.amazonaws.com
          ECR_URI="713881823524.dkr.ecr.ap-south-1.amazonaws.com/kubernetes/final_project"     
          docker tag demo-crm:$VERSION $ECR_URI:$VERSION
          docker tag demo-crm:latest $ECR_URI:latest
          docker push $ECR_URI:$VERSION
          docker push $ECR_URI:latest
      - name: Update kubeconfig for EKS Cluster
        run: |
          aws eks update-kubeconfig --region ap-south-1 --name Fred-cluster  # Change 'Fred-cluster' to your cluster name
      - name: Perform Rolling Update on demo-crm Deployment
        # Performs rolling update and pulls the newly versioned image
        run: |
          IMAGE_URI="713881823524.dkr.ecr.ap-south-1.amazonaws.com/kubernetes/final_project:$VERSION"
          kubectl set image deployment/demo-deployment demo=$IMAGE_URI -n default  # Change namespace if needed
          kubectl rollout status deployment/demo-deployment -n default
          kubectl get pods -n default


          
       
